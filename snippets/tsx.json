{
  "div": {
    "prefix": "div",
    "body": ["<div>", "\t$1", "</div>"],
    "description": "HTML - Defines a section in a document"
  },
  "span": {
    "prefix": "span",
    "body": "<span>$1</span>$2",
    "description": "HTML - Defines a section in a document"
  },
  "typescriptReactClassComponent": {
    "key": "typescriptReactClassComponent",
    "prefix": "tsrcc",
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactClassExportComponent": {
    "key": "typescriptReactClassExportComponent",
    "prefix": "tsrce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactFunctionalExportComponent": {
    "key": "typescriptReactFunctionalExportComponent",
    "prefix": "tsrfce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactFunctionalComponent": {
    "key": "typescriptReactFunctionalComponent",
    "prefix": "tsrfc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactArrowFunctionExportComponent": {
    "key": "typescriptReactArrowFunctionExportComponent",
    "prefix": "tsrafce",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactArrowFunctionComponent": {
    "key": "typescriptReactArrowFunctionComponent",
    "prefix": "tsrafc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactClassPureComponent": {
    "key": "typescriptReactClassPureComponent",
    "prefix": "tsrpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "typescriptReactClassExportPureComponent": {
    "key": "typescriptReactClassExportPureComponent",
    "prefix": "tsrpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReact": {
    "key": "importReact",
    "prefix": "imr",
    "body": ["import React from 'react'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReactWithComponent": {
    "key": "importReactWithComponent",
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReactWithMemo": {
    "key": "importReactWithMemo",
    "prefix": "imrm",
    "body": ["import React, { memo } from 'react'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "importReactWithPureComponent": {
    "key": "importReactWithPureComponent",
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactArrowFunctionComponent": {
    "key": "reactArrowFunctionComponent",
    "prefix": "rafc",
    "body": [
      "import React from 'react'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactArrowFunctionExportComponent": {
    "key": "reactArrowFunctionExportComponent",
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactClassComponent": {
    "key": "reactClassComponent",
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactClassExportComponent": {
    "key": "reactClassExportComponent",
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionMemoComponent": {
    "key": "reactFunctionMemoComponent",
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalComponent": {
    "key": "reactFunctionalComponent",
    "prefix": "rfc",
    "body": [
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "reactFunctionalExportComponent": {
    "key": "reactFunctionalExportComponent",
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useCallback": {
    "key": "useCallback",
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useContext": {
    "key": "useContext",
    "prefix": "useContextSnippet",
    "body": ["const ${1:first} = useContext(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useEffect": {
    "key": "useEffect",
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useImperativeHandle": {
    "key": "useImperativeHandle",
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useLayoutEffect": {
    "key": "useLayoutEffect",
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useMemo": {
    "key": "useMemo",
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useReducer": {
    "key": "useReducer",
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useRef": {
    "key": "useRef",
    "prefix": "useRefSnippet",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "useState": {
    "key": "useState",
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructProps": {
    "key": "destructProps",
    "prefix": "cp",
    "body": ["const { ${1:first} } = this.props"],
    "description": "Creates and assigns a local variable using props destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "destructState": {
    "key": "destructState",
    "prefix": "cs",
    "body": ["const { ${1:first} } = this.state"],
    "description": "Creates and assigns a local variable using state destructing",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "emptyState": {
    "key": "emptyState",
    "prefix": "est",
    "body": ["state = { ${1:first} }"],
    "description": "Creates empty state object. To be used in a constructor.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentDidMount": {
    "key": "componentDidMount",
    "prefix": "cdm",
    "body": ["componentDidMount() { ${1:first} }"],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "shouldComponentUpdate": {
    "key": "shouldComponentUpdate",
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) { ${1:first} }"],
    "description": "Invoked before rendering when new props or state are being received. ",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentDidUpdate": {
    "key": "componentDidUpdate",
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) { ${1:first}} "],
    "description": "Invoked immediately after the component's updates are flushed to the DOM.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentWillUnmount": {
    "key": "componentWillUnmount",
    "prefix": "cwun",
    "body": ["componentWillUnmount() {${1:first} }"],
    "description": "Invoked immediately before a component is unmounted from the DOM.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "getDerivedStateFromProps": {
    "key": "getDerivedStateFromProps",
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {${1:first}}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates.",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "getSnapshotBeforeUpdate": {
    "key": "getSnapshotBeforeUpdate",
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}"
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "createContext": {
    "key": "createContext",
    "prefix": "rcontext",
    "body": ["const ${1:first} = React.createContext()"],
    "description": "Create React context",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "createRef": {
    "key": "createRef",
    "prefix": "cref",
    "body": ["this.${1:first}Ref = React.createRef()"],
    "description": "Create ref statement used inside constructor",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentSetStateObject": {
    "key": "componentSetStateObject",
    "prefix": "sst",
    "body": ["this.setState({${1:first}})"],
    "description": "Performs a shallow merge of nextState into current state",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentSetStateFunc": {
    "key": "componentSetStateFunc",
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { ${1:first} }})"],
    "description": "Performs a shallow merge of nextState into current state",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentProps": {
    "key": "componentProps",
    "prefix": "props",
    "body": ["this.props.${1:first}"],
    "description": "Access component's props",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "componentState": {
    "key": "componentState",
    "prefix": "state",
    "body": ["this.state.${1:first}"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "bindThis": {
    "key": "bindThis",
    "prefix": "bnd",
    "body": ["this.${1:first} = this.${1:first}.bind(this)"],
    "description": "Binds this to a method",
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "commentBigBlock": {
    "key": "commentBigBlock",
    "prefix": "cmmb",
    "body": ["/**", " * ${1:first}", " */"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "hocComponent": {
    "key": "hocComponent",
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact"
  },
  "nextPage": {
    "prefix": "np",
    "body": [
      "import { NextPage } from 'next'",
      "",
      "interface Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}: NextPage<Props> = ({}) => {",
      "  return <div>${2}</div>",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}"
    ]
  },
  "nextPageServerSideProps": {
    "prefix": "npssp",
    "body": [
      "import { NextPage, GetServerSideProps } from 'next'",
      "",
      "interface Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}: NextPage<Props> = ({}) => {",
      "  return <div>${2}</div>",
      "}",
      "",
      "export const getServerSideProps: GetServerSideProps = async (ctx) => {",
      "  return {",
      "    props: {}",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}"
    ]
  },
  "nextPageStaticProps": {
    "prefix": "npsp",
    "body": [
      "import { NextPage, GetStaticProps } from 'next'",
      "",
      "interface Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}: NextPage<Props> = ({}) => {",
      "  return <div>${2}</div>",
      "}",
      "",
      "export const getStaticProps: GetStaticProps = async (ctx) => {",
      "  return {",
      "    props: {},",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}"
    ]
  },
  "nextPageStaticPaths": {
    "prefix": "npspth",
    "body": [
      "import { NextPage, GetStaticPaths } from 'next'",
      "",
      "interface Props {}",
      "",
      "const ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}: NextPage<Props> = ({}) => {",
      "  return <div>${2}</div>",
      "}",
      "",
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "  return {",
      "    paths: [],",
      "    fallback: false,",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}"
    ]
  },
  "nextServerSideProps": {
    "prefix": "nssp",
    "body": [
      "export const getServerSideProps: GetServerSideProps = async (ctx) => {",
      "  return {",
      "    props: {}",
      "  }",
      "}"
    ]
  },
  "nextStaticProps": {
    "prefix": "nsp",
    "body": [
      "export const getStaticProps: GetStaticProps = async (ctx) => {",
      "  return {",
      "    props: {},",
      "  }",
      "}"
    ]
  },
  "nextStaticPaths": {
    "prefix": "nspth",
    "body": [
      "export const getStaticPaths: GetStaticPaths = async () => {",
      "  return {",
      "    paths: [],",
      "    fallback: false,",
      "  }",
      "}"
    ]
  },
  "nextInitialProps": {
    "prefix": "nip",
    "body": [
      "${1:${TM_FILENAME_BASE/(.)/${1:/upcase}/}}.getInitialProps = async (ctx) => {",
      "  return {",
      "    ${2}",
      "  }",
      "}"
    ]
  },
  "nextImage": {
    "prefix": "nimg",
    "body": ["<Image src=\"${1}\" alt=\"${2}\" />"]
  },
  "nextApp": {
    "prefix": "napp",
    "body": [
      "import type { AppProps } from 'next/app'",
      "",
      "export default function MyApp({ Component, pageProps }: AppProps) {",
      "  return <Component {...pageProps} />",
      "}"
    ]
  },
  "nextDocument": {
    "prefix": "ndoc",
    "body": [
      "import Document, { Html, Head, Main, NextScript, DocumentContext } from 'next/document'",
      "",
      "class MyDocument extends Document {",
      "  static async getInitialProps(ctx: DocumentContext) {",
      "    const initialProps = await Document.getInitialProps(ctx)",
      "    return { ...initialProps }",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <Html>",
      "        <Head />",
      "        <body>",
      "          <Main />",
      "          <NextScript />",
      "        </body>",
      "      </Html>",
      "    );",
      "  }",
      "}",
      "",
      "export default MyDocument"
    ]
  }
}
